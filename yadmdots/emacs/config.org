#+TITLE: Emacs Configuration
#+AUTHOR: Steve Fisher
#+EMAIL: xirconuk@gmail.com
#+PROPERTY: header-args:emacs-lisp :lexical t
#+OPTIONS: num:nil
#+STARTUP: showall

* Notes:
To disable a section in this config add ":tangle no" to the end of the BEGIN_SRC block.

* Speed up startup
#+BEGIN_SRC emacs-lisp
(defvar default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(setq gc-cons-threshold 100000000)
(add-hook 'emacs-startup-hook
      (lambda ()
	"Restore defalut values after init."
	(setq file-name-handler-alist default-file-name-handler-alist)
	(setq gc-cons-threshold 100000000)
	(add-hook 'focus-out-hook 'garbage-collect)))

(setq inhibit-compacting-font-caches t) ; Don’t compact font caches during GC.
(setq gcmh-idle-delay 0.3)

#+END_SRC

* Do this first:
#+BEGIN_SRC emacs-lisp 
(normal-erase-is-backspace-mode 2)

;;(setq debug-on-error 1)
;;(setq toggle-debug-on-quit 1)

(setq whitespace-global-modes '(not org-mode))

(add-to-list 'default-frame-alist '(background-color . "#000000"))

(require 'use-package)

(remove-hook 'find-file-hooks 'vc-find-file-hook)

(defun myprompt()
   (interactive)
   (message "C-w cut | M-w copy | C-y paste | M-y yank next"))

(defun my-openfile()
    (interactive)
    (call-interactively 'find-file)
    (recentf-save-list/silent))

(defun my-kill-buffer()
    (interactive)
    (kill-buffer (current-buffer)))

(setq warning-minimum-level :emergency)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

(set-frame-parameter nil 'alpha 100)
#+END_SRC 

* Straight Bootstrap:
#+BEGIN_SRC emacs-lisp 
(setq straight-repository-branch "develop")
 (defvar bootstrap-version)
   (let ((bootstrap-file
          (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
         (bootstrap-version 5))
     (unless (file-exists-p bootstrap-file)
       (with-current-buffer
           (url-retrieve-synchronously
            "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
            'silent 'inhibit-cookies)
         (goto-char (point-max))
      (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

(setq package-enable-at-startup nil)

(straight-use-package 'use-package)

#+END_SRC

** Custom Straight Package Loads:
#+BEGIN_SRC emacs-lisp
(straight-use-package
   '(sidebar :type git :host github :repo "sebastiencs/sidebar.el"))

#+END_SRC 

* Load path:
#+BEGIN_SRC emacs-lisp
(defun update-load-path (&rest _)
  "Update `load-path'."
  (push (expand-file-name "site-lisp" user-emacs-directory) load-path)
  (push (expand-file-name "My-emacs" user-emacs-directory) load-path)
  (push (expand-file-name "plugins" user-emacs-directory) load-path)
  (push (expand-file-name "lisp" user-emacs-directory) load-path))

(add-to-list 'load-path "~/.local/share/icons-in-terminal/")
(add-to-list 'load-path "~/.emacs.d/lisp/sidebar.el/")
(update-load-path)

#+END_SRC

* Keyboard & Mouse related:
** Unset C- and M- digit keys
#+BEGIN_SRC emacs-lisp
;;;(setq mouse-autoselect-window t)
(dotimes (n 10)
  (global-unset-key (kbd (format "C-%d" n)))
  (global-unset-key (kbd (format "M-%d" n))))

;;(setq mouse-autoselect-window t)
(xterm-mouse-mode 1)
(global-set-key (kbd "<mouse-4>") 'scroll-down-line)
(global-set-key (kbd "<mouse-5>") 'scroll-up-line)
#+END_SRC 
 
** Load keybindings:
#+BEGIN_SRC emacs-lisp 
(load "~/.emacs.d/lisp/init-keybindings.el")

#+END_SRC

** Improved keyboard quit function:
#+BEGIN_SRC emacs-lisp
(defun my-escape ()
   "Quit in current context.
    When there is an active minibuffer exit that.
    Ignore quit command for keyboard macros. Otherwise
    behave like `keyboad-quit'."
    (interactive)
    (ryo-off)
    (if-let ((minibuffer (active-minibuffer-window)))
        (with-current-buffer (window-buffer minibuffer)
          (minibuffer-keyboard-quit))
      ;; ignore quit for macros
      (unless (or defining-kbd-macro executing-kbd-macro)
        (keyboard-quit))))

(global-set-key [remap keyboard-quit] #'my-escape)

#+END_SRC 

** Ligatures: 
#+BEGIN_SRC emacs-lisp
;; Don't forget to install the font FiraCode-Regular-Symbol.otf in .emacs.d
(use-package init-fira-ligatures)
#+END_SRC 

** Parens:
#+BEGIN_SRC emacs-lisp 
;; Pretty parens:
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

;; Highlight matching paren
(use-package paren
:straight t
:hook (after-init . show-paren-mode)
  :config
  (setq show-paren-when-point-inside-paren t)
  (setq show-paren-when-point-in-periphery t))

;; Automatic parenthesis pairing
(use-package elec-pair
:straight t
:hook (after-init . electric-pair-mode)
:init (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit))
#+END_SRC

** Misc Keyboard:
#+BEGIN_SRC emacs-lisp 
(global-unset-key (vector (list 'shift 'left)))
(global-unset-key (vector (list 'shift 'right)))
(global-unset-key (vector (list 'shift 'up)))
(global-unset-key (vector (list 'shift 'down)))
(setq org-support-shift-select t)
#+END_SRC 
 
* Pandoc:
#+BEGIN_SRC emacs-lisp
(straight-use-package 'pandoc)
(add-hook 'markdown-mode-hook 'pandoc-mode)
(add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
#+END_SRC

* Spare:
#+BEGIN_SRC emacs-lisp :tangle no 
#+END_SRC

* Aliases:
#+BEGIN_SRC emacs-lisp
(defalias 'rs 'replace-string)
(defalias 'ds 'desktop-save)
(defalias 'pl 'list-packages)
(defalias 'spa 'straight-pull-all)
#+END_SRC 
 
* User info:
#+BEGIN_SRC emacs-lisp
(setq my-full-name "Steve Fisher")                 ; User full name
(setq my-mail-address "xirconuk@gmail.com")   ; Email address
#+END_SRC

* Package repositories:
#+BEGIN_SRC emacs-lisp
(setq package-archives
  '(("Elpa"	 . "https://elpa.gnu.org/packages/")
    ;;("Melpa Stable" . "https://stable.melpa.org/packages/")
    ("Melpa"	     . "https://melpa.org/packages/"))
  package-archive-priorities
   '(("MELPA" . 10)
    ("GNU ELPA"	    . 5)))
#+END_SRC 
 


* Environment:
** Menus, Scroll bars, cursor colour and Yes/No handling:
#+BEGIN_SRC emacs-lisp
(set-cursor-color "green")
;;(scroll-bar-mode 1)
;;(tool-bar-mode 1)
;;(menu-bar-mode 1)
(fset 'yes-or-no-p 'y-or-n-p)
(setq visible-bell 1)
#+END_SRC 
 
** Desktop save and load:
#+BEGIN_SRC emacs-lisp 
  (require 'desktop)
  (desktop-save-mode +1)
  (desktop-read)

  (save-place-mode +1)
  (straight-use-package 'idle-highlight-mode)  

  (use-package midnight
    :straight t)
  (midnight-delay-set 'midnight-delay "12:00am")
#+END_SRC 

** Balance brackets:
#+BEGIN_SRC emacs-lisp 
(defun balance ()
(interactive)
(let* (
     ($bracket-alist
      '( (?“ . ?”) (?‹ . ?›) (?« . ?») (?【 . ?】) (?〖 . ?〗) (?〈 . ?〉) (?《 . ?》) (?「 . ?」) (?『 . ?』) (?{ . ?}) (?\[ . ?\]) (?\( . ?\))))
     ;; regex string of all pairs to search.
     ($bregex
      (let (($tempList nil))
        (mapc
         (lambda (x)
           (push (char-to-string (car x)) $tempList)
           (push (char-to-string (cdr x)) $tempList))
         $bracket-alist)
        (regexp-opt $tempList )))
     $p1
     $p2
     ;; each entry is a vector [char position]
     ($stack '())
     ($char nil)
     $pos
     $is-closing-char-p
     $matched-open-char
     )
(if (region-active-p)
    (setq $p1 (region-beginning) $p2 (region-end))
  (setq $p1 (point-min) $p2 (point-max)))
(save-restriction
  (narrow-to-region $p1 $p2)
  (progn
    (goto-char 1)
    (while (re-search-forward $bregex nil "move")
      (setq $pos (point))
      (setq $char (char-before))
      (progn
        (setq $is-closing-char-p (rassoc $char $bracket-alist))
        (if $is-closing-char-p
            (progn
              (setq $matched-open-char
                    (if $is-closing-char-p
                        (car $is-closing-char-p)
                      (error "logic error 64823. The char %s has no matching pair."
                             (char-to-string $char))))
              (if $stack
                  (if (eq (aref (car $stack) 0) $matched-open-char )
                      (pop $stack)
                    (push (vector $char $pos) $stack ))
                (progn
                  (goto-char $pos)
                  (error "First mismtach found. the char %s has no matching pair."
                         (char-to-string $char)))))
          (push (vector $char $pos) $stack ))))
    (if $stack
        (progn
          (goto-char (aref (car $stack) 1))
          (message "Mismatch found. The char %s has no matching pair." $stack))
      (print "All brackets/quotes match."))))))
#+END_SRC 
    
** Line numbers:
#+BEGIN_SRC emacs-lisp 
(global-linum-mode 1)
(setq display-line-numbers-width-start 1)
(setq display-line-numbers 'relative)

(require 'linum-highlight-current-line-number)
(setq linum-format 'linum-highlight-current-line-number)

(setq linum-format "%d ")
(require 'linum-highlight-current-line-number)
(setq linum-format 'linum-highlight-current-line-number)
(set-face-foreground 'linum "MediumPurple")
(set-frame-parameter (selected-frame) 'internal-border-width 15)

;;; No line numbers in terminal etc:
(add-hook 'term-mode-hook (lambda () (linum-mode -1)))
(add-hook 'vterm-mode-hook (lambda () (linum-mode -1)))
(add-hook 'dired-mode-hook  (lambda () (linum-mode -1)))
(add-hook 'sidebar-mode-hook  (lambda () (linum-mode -1)))

(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

(size-indication-mode 1)
#+END_SRC 

** Set default mode:
#+BEGIN_SRC emacs-lisp 
(setq-default major-mode 'text-mode)
#+END_SRC 

** Identations & highlight identations:
#+BEGIN_SRC emacs-lisp 
;; Highlight indentions
(use-package highlight-indent-guides
    :straight t
    :diminish
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-responsive t))

;; Electric-indent - Remove the extremely irritating indent behaviour in org-mode:: 
(add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))
#+END_SRC 

** Spell checking:
#+BEGIN_SRC emacs-lisp
(straight-use-package 'spell-fu)

(global-spell-fu-mode)
 
(use-package flyspell
  ;;:ensure nil
  :straight t
  :diminish flyspell-mode
  :if (executable-find "aspell")
  :hook (((text-mode outline-mode) . flyspell-mode)
         (prog-mode . flyspell-prog-mode)
         (flyspell-mode . (lambda ()
                            (unbind-key "C-;" flyspell-mode-map)
                            (unbind-key "C-," flyspell-mode-map)
                            (unbind-key "C-." flyspell-mode-map))))
  :init
  (setq flyspell-issue-message-flag nil)
  (setq ispell-program-name "aspell")
  (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_GB" "--run-together")))
#+END_SRC 

** Colourize colour names:
#+BEGIN_SRC emacs-lisp 
(use-package rainbow-mode
  :straight t
  :diminish
  :hook ((emacs-lisp-mode web-mode css-mode) . rainbow-mode))
#+END_SRC 

** Highlight TODO and similar keywords in comments and strings
#+BEGIN_SRC emacs-lisp
;; TODO BUG DEFECT ISSUE WORKAROUND
(use-package hl-todo
  :straight t
  :custom-face (hl-todo ((t (:box t :bold t))))
  :bind (:map hl-todo-mode-map
              ([C-f3] . hl-todo-occur)
              ("C-c t p" . hl-todo-previous)
              ("C-c t n" . hl-todo-next)
              ("C-c t o" . hl-todo-occur))
  :hook (after-init . global-hl-todo-mode)
  :config
  (dolist (keyword '("" "BUG" "DEFECT" "ISSUE" "STEVE"))
    (cl-pushnew `(,keyword . "#cd5c5c") hl-todo-keyword-faces))
    (cl-pushnew '("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA". "blue") hl-todo-keyword-faces)
    (cl-pushnew '("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ" . "blue") hl-todo-keyword-faces)
    (cl-pushnew '("TODO" . "green") hl-todo-keyword-faces)
    (cl-pushnew '("OBSOLETE" . "cyan") hl-todo-keyword-faces)
    (cl-pushnew '("NOTTANGLED" . "red") hl-todo-keyword-faces)
    (cl-pushnew '("TAP" . "yellow") hl-todo-keyword-faces)
    (cl-pushnew '("WORKAROUND" . "#d0bf8f") hl-todo-keyword-faces))
#+END_SRC 
 
** Copy & clipboard behaviour:
#+BEGIN_SRC emacs-lisp 
(setq  kill-do-not-save-duplicates 1)

(clipmon-mode 1)

;; Keep selection highlighted after copy:
(defadvice kill-ring-save (after keep-transient-mark-active ())
"Override the deactivation of the mark."
(setq deactivate-mark nil))

(ad-activate 'kill-ring-save)

;; Delete selection if you insert
(use-package delsel
    :straight t
    :hook (after-init . delete-selection-mode))

;; Rectangle
(use-package rect
    :bind (("<C-return>" . rectangle-mark-mode)))

;; Use system clipboard
(setq gui-select-enable-clipboard t)

;;(setq x-select-enable-clipboard nil)
(setq gui-select-enable-primary t)

#+End_SRC 


** Language/utf8 etc:
#+BEGIN_SRC emacs-lisp :tangle no 
(eval-when-compile
   (use-package init-custom))

;;; utf-8
(set-language-environment 'utf-8)
(setq locale-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq buffer-file-coding-system 'utf-8)
(setq x-select-request-type '(UTF8_STRING COMOUND_TEXT TEXT STRING))

;;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Filesets.html
(filesets-init)
#+END_SRC 

** Modeline:
#+BEGIN_SRC emacs-lisp 
(use-package doom-modeline
  :straight t
  :ensure t
  :defer t
  :hook (after-init . doom-modeline-init))

(set-face-background 'mode-line "#00001f")
(set-face-foreground 'mode-line "#999999")
(setq doom-modeline-icon (display-graphic-p))
(setq doom-modeline-major-mode-icon t)
(setq doom-modeline-major-mode-color-icon t)
;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
(setq doom-modeline-buffer-state-icon t)
(setq doom-modeline-modal-icon t)

(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(display-time)
#+END_SRC 

** Sudo-edit:
#+BEGIN_SRC emacs-lisp 
(use-package sudo-edit
   :straight t)
(require 'auto-sudoedit)
(auto-sudoedit-mode 1)
(use-package docker-tramp
    :straight t )
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+END_SRC 

** Shebang:
#+BEGIN_SRC emacs-lisp 
(use-package insert-shebang :straight t)
#+END_SRC 
 

** Display icons everywhere:
#+BEGIN_SRC emacs-lisp
(use-package company-box
    :straight t
    :diminish company-box-mode
    :hook (company-mode . company-box-mode)
    :defer 0.5)

(use-package all-the-icons :straight t :defer 0.5)
#+END_SRC 

** Configuration of Terminal, shells, etc: 
#+BEGIN_SRC emacs-lisp 
;; Use zsh
(setq explicit-shell-file-name "/bin/zsh")

(defvar my-term-shell "/bin/zsh")

(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))

(ad-activate 'ansi-term)

(use-package vterm
   :straight t)
(setq vterm-always-compile-module t)

(use-package vterm-toggle :straight t)

;; Don't whine if there is a terminal open.
;; Do any keybindings and theme setup here
  
(defun set-no-process-query-on-exit ()
      (let ((proc (get-buffer-process (current-buffer))))
          (when (processp proc)
          (set-process-query-on-exit-flag proc nil))))
(add-hook 'term-exec-hook 'set-no-process-query-on-exit)
#+END_SRC 

** Org-Mode Configuration:
#+BEGIN_SRC emacs-lisp 
(use-package org
   :straight t)
(define-key org-mode-map (kbd "C-e") nil)
(define-key org-mode-map (kbd "C-j") nil)
(define-key org-mode-map (kbd "M-s") nil)

(use-package org-superstar
   :straight t)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

(add-hook 'org-mode-hook (lambda ()
"Beautify Org Checkbox Symbol"
    (push '("[ ]" .  "☐") prettify-symbols-alist)
    (push '("[X]" . "☑" ) prettify-symbols-alist)
    (push '("[-]" . "❍" ) prettify-symbols-alist)
    (prettify-symbols-mode)))

;; Meh!
;(use-package boxy-headlines)
;(define-key org-mode-map (kbd "C-c r o") 'boxy-headlines)

#+END_SRC

* Spare:
#+BEGIN_SRC emacs-lisp 
#+END_SRC 
 
* Temporary files:
#+BEGIN_SRC emacs-lisp
  ;; store all backup and autosave files in the tmp dir
;;(setq-default auto-save-no-message t)
(setq backup-directory-alist
       `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC 
 
* Spare:
#+BEGIN_SRC emacs-lisp
#+END_SRC

* Sidebars:
#+BEGIN_SRC emacs-lisp
(use-package neotree
    :straight t)
(setq neo-theme 'icons)
(global-set-key [f8] 'neotree-toggle)
(setq neo-smart-open t)

(use-package sr-speedbar
    :straight t)
(global-set-key (kbd "<f11>") 'sr-speedbar-toggle)
(setq sr-speedbar-right-side nil)
(setq speedbar-initial-expansion-list-name "buffers")

(use-package dired-sidebar
    :straight t
    :bind (("<f7>" . dired-sidebar-toggle-sidebar))
    ;;:ensure t
    :commands (dired-sidebar-toggle-sidebar)
    :init
    (add-hook 'dired-sidebar-mode-hook
              (lambda ()
                (unless (file-remote-p default-directory)
                  (auto-revert-mode))))
    :config
    (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
    (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

    (setq dired-sidebar-subtree-line-prefix "__")
    ;;(setq dired-sidebar-theme 'vscode)
    (setq dired-sidebar-use-term-integration t)
    (setq dired-sidebar-use-custom-font t))

(use-package dired-quick-sort
   :straight t)
(dired-quick-sort-setup)


(defun my-dired-mode-hook ()
  "My `dired' mode hook."
  ;; To hide dot-files by default
  (dired-hide-dotfiles-mode)

  ;; To toggle hiding
  (define-key dired-mode-map "." #'dired-hide-dotfiles-mode))

(add-hook 'dired-mode-hook #'my-dired-mode-hook)


(use-package sidebar
        :straight t)
(global-set-key (kbd "H-j C-f") 'sidebar-open)
(global-set-key (kbd "H-b s") 'sidebar-buffers-open)

;;(require 'sr-speedbar)

#+END_SRC

* Load My Files:
#+BEGIN_SRC emacs-lisp
(load "/home/xircon/.emacs.d/functions.el")

(load "~/.emacs.d/lisp/init-my-ryo.el")
(ryo-modal-mode 0)
(set-background-color "#000000")

#+END_SRC 

* Centaur Tab-bar:
#+BEGIN_SRC emacs-lisp
(use-package centaur-tabs
  :demand
  :straight t
  :config
  (centaur-tabs-mode t)
  :bind
  ("H-<kp-4>" . centaur-tabs-backward)
  ("H-<kp-6>" . centaur-tabs-forward))
  (setq centaur-tabs-set-icons t)
  (centaur-tabs-headline-match)
(defun centaur-tabs-hide-tab (x)
  "Do no to show buffer X in tabs."
  (let ((name (format "%s" x)))
    (or
     ;; Current window is not dedicated window.
     (window-dedicated-p (selected-window))

     ;; Buffer name not match below blacklist.
     (string-prefix-p "*epc" name)
     (string-prefix-p "*helm" name)
     (string-prefix-p "*Helm" name)
     (string-prefix-p "*Compile-Log*" name)
     (string-prefix-p "*lsp" name)
     (string-prefix-p "*company" name)
     (string-prefix-p "*flycheck" name)
     (string-prefix-p "*tramp" name)
     (string-prefix-p " *Mini" name)
     (string-prefix-p "*help" name)
     (string-prefix-p "*straight" name)
     (string-prefix-p " *temp" name)
     (string-prefix-p "*Help" name)
     (string-prefix-p "*mybuf" name)

     ;; Is not magit buffer.
     (and (string-prefix-p "magit" name)
	  (not (file-name-extension name)))
     )))
#+END_SRC 
 
* Theme and Appearance:
#+BEGIN_SRC emacs-lisp  

  (message "Section 9")

  (setq custom-theme-directory "~/.emacs.d/themes")

  (use-package abyss-theme
       ;;:ensure t
       :straight t
       :config (load-theme 'abyss t))

  (load-theme 'abyss t)
  (global-hl-line-mode +1) 
  (set-face-background 'region "DarkOrchid1")
  ;(set-face-foreground 'mode-line "#4477aa")
  ;(set-face-background 'mode-line "#101010")
  (set-face-foreground 'font-lock-comment-face  "BlueViolet")
  (set-face-background 'font-lock-comment-face  "gray10")
  (set-face-attribute 'font-lock-comment-face nil :bold t)
  (use-package color :straight t)

  (defun minibuffer-bg ()
    (set (make-local-variable 'face-remapping-alist)
         '((default :background "#232959"))))
      (add-hook 'minibuffer-setup-hook 'minibuffer-bg)

(defun my-emoji-fonts ()

(set-fontset-font t 'symbol "Noto Color Emoji")

(set-fontset-font t 'symbol "Symbola" nil 'append))

(if (daemonp)

(add-hook 'server-after-make-frame-hook #'my-emoji-fonts)

(my-emoji-fonts))

(use-package unicode-fonts
   :ensure t
   :config
    (unicode-fonts-setup))
;; 🐀 😃 😂 🐱 🐶 😁 🐄 🐸 🇬🇧 🐛 
#+END_SRC

* Packages
** Scrolling:
#+BEGIN_SRC emacs-lisp
 ;;(use-package smooth-scrolling)

(use-package good-scroll
       :straight t)

(good-scroll-mode 1)


 ;; (setq redisplay-dont-pause t
 ;;   scroll-margin 1
 ;;   scroll-step 1
 ;;   scroll-conservatively 10000
 ;;   scroll-preserve-screen-position 1)
#+END_SRC 
 
** Benchmark:
#+BEGIN_SRC emacs-lisp :tangle no
;; NOTTANGLED
(use-package benchmark-init
  :ensure t
  :straight t
  :config
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+END_SRC 
 
** Easy Kill:
#+BEGIN_SRC emacs-lisp
(use-package easy-kill
    ;;:ensure t
    :straight t
    :defer
    :config
    (global-set-key [remap kill-ring-save] #'easy-kill)
    (global-set-key [remap cua-copy-region] #'easy-kill)
    (global-set-key [remap mark-sexp] #'easy-mark))

(setq x-select-enable-clipboard t)
(setq save-interprogram-paste-before-kill t)
#+END_SRC

** Undo-fu-session:
#+BEGIN_SRC emacs-lisp 
(use-package undo-fu-session
  :straight t
  :config
  (setq undo-fu-session-incompatible-files '("COMMIT_EDITMSG$" "git-rebase-todo$")))

(global-undo-fu-session-mode)
#+END_SRC 

** Spare:
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Abbrev Mode:
#+BEGIN_SRC emacs-lisp
(setq-default abbrev-mode t)
(setq abbrev-file-name "~/.emacs.d/abbrev_defs")    ;; definitions from...
(setq save-abbrevs 'silently)      ;; save abbrevs when files are saved

(defun create-abbrev ()
  (interactive)
  (setq current-prefix-arg '(0)) ; C-u
  (call-interactively 'add-global-abbrev))

(global-set-key (kbd "H-y") 'create-abbrev)

#+END_SRC

** Persistent Scratch:
#+BEGIN_SRC emacs-lisp
(use-package persistent-scratch
    :straight t
    :preface
    (defun my-save-buffer ()
    "Save scratch and other buffer."
     (interactive)
     (let ((scratch-name "*scratch*"))
        (if (string-equal (buffer-name) scratch-name)
            (progn
            (message "Saving %s..." scratch-name)
            (persistent-scratch-save)
            (message "Wrote %s" scratch-name))
            (save-buffer))))
    :hook (after-init . persistent-scratch-setup-default)
    :bind (:map lisp-interaction-mode-map
    ("C-x C-s" . my-save-buffer)))
#+END_SRC 

** Spare:
#+BEGIN_SRC emacs-lisp 
#+END_SRC 
 
** Eyebrowse mode (AKA Virtual desktops):
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :straight t
  :diminish eyebrowse-mode
  :config (progn
            (define-key eyebrowse-mode-map (kbd "C-1") 'eyebrowse-switch-to-window-config-1)
            (define-key eyebrowse-mode-map (kbd "C-2") 'eyebrowse-switch-to-window-config-2)
            (define-key eyebrowse-mode-map (kbd "C-3") 'eyebrowse-switch-to-window-config-3)
            (define-key eyebrowse-mode-map (kbd "C-4") 'eyebrowse-switch-to-window-config-4)
            (eyebrowse-mode t)
            (setq eyebrowse-new-workspace t)))

(eyebrowse-mode t)
#+END_SRC

** History:
#+BEGIN_SRC emacs-lisp

(use-package history :straight t)
(history-mode +1)
  (use-package redo+
    :straight t)
  (global-set-key (kbd "C-?") 'redo)

  (setq undo-tree-auto-save-history 1)

  (auto-fill-mode -1)

  (use-package savehist
    ;;:ensure nil
    :straight t
    :hook (after-init . savehist-mode)
    :init (setq enable-recursive-minibuffers t ; Allow commands in minibuffers
                history-length 1000
                savehist-additional-variables '(mark-ring
                                                global-mark-ring
                                                search-ring
                                                regexp-search-ring
                                                extended-command-history)
                savehist-autosave-interval 60))
  (setq savehist-save-minibuffer-history t)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring
          last-kbd-macro
          kmacro-ring
          shell-command-history
          Info-history-list
          register-alist))
  (savehist-mode t)

#+END_SRC

** Bookmark+: 
#+BEGIN_SRC emacs-lisp :tangle no
(use-package bookmark+
   :straight t
   :quelpa (bookmark+ :fetcher wiki
                      :files
                      ("bookmark+.el"
                       "bookmark+-mac.el"
                       "bookmark+-bmu.el"
                       "bookmark+-1.el"
                       "bookmark+-key.el"
                       "bookmark+-lit.el"
                       "bookmark+-doc.el"
                       "bookmark+-chg.el"))
   :defer 2)
#+END_SRC 
 

** Recentf:
#+BEGIN_SRC emacs-lisp
(use-package recentf
    :straight t)
(recentf-mode 1)
(setq recentf-max-menu-items 50)
(global-set-key "\C-x\ \C-r" 'consult-buffer)

(defun recentf-save-list/silent ()
 (interactive)
 (let ((save-silently t)) (recentf-save-list))
 (message nil))

(run-at-time (current-time) 180 'recentf-save-list/silent)

(add-hook 'find-file-hook 'recentf-save-list/silent)
#+END_SRC

** Quickrun
#+BEGIN_SRC emacs-lisp
(use-package quickrun
    :straight t) 
(setq quickrun-timeout-seconds nil)
#+END_SRC 

** Start Server:
#+BEGIN_SRC emacs-lisp
  ;Start server
;; Start server (but don't restart).
(use-package server)
(unless (server-running-p)
  (server-start))

;; (use-package server
;; :ensure nil
;; :hook (after-init . server-mode))
#+END_SRC

** Miscellaneous packages:
#+BEGIN_SRC emacs-lisp
(use-package journalctl-mode :straight t) 
(use-package copyit :straight t)                    ; copy path , url, etc.
;;(use-package daemons)                   ; system services/daemons
(use-package diffview :straight t)                  ; side-by-side diff view
(use-package esup :straight t)                      ; Emacs startup profiler
;;(use-package htmlize :straight t)                   ; covert to html
;;(use-package list-environment)
;;(use-package memory-usage)
;;(use-package ztree)                     ; text mode directory tree. Similar with beyond compare
#+END_SRC 

** Search tools: `wgrep', `ag' and `rg' 
#+BEGIN_SRC emacs-lisp 

  (use-package wgrep
    :straight t
    :init
    (setq wgrep-auto-save-buffer t)
    (setq wgrep-change-readonly-file t))

  (use-package ag
    :straight t
    :defines projectile-command-map
    :init
    (with-eval-after-load 'projectile
      (bind-key "s S" #'ag-project projectile-command-map))
    :config
    (setq ag-highlight-search t)
    (setq ag-reuse-buffers t)
    (setq ag-reuse-window t)
    (use-package wgrep-ag))

  (use-package rg
    :straight t
    :hook (after-init . rg-enable-default-bindings)
    :config
    (setq rg-group-result t)
    (setq rg-show-columns t)

    (cl-pushnew '("tmpl" . "*.tmpl") rg-custom-type-aliases)

    (with-eval-after-load 'projectile
      (defalias 'projectile-ripgrep 'rg-project)
      (bind-key "s R" #'rg-project projectile-command-map))

    (when (fboundp 'ag)
      (bind-key "a" #'ag rg-global-map)))

#+END_SRC 

** Which-key:
#+BEGIN_SRC emacs-lisp 
  ;; Display available keybindings in popup
  (use-package which-key
        :straight t
        :diminish which-key-mode
        :defer 10
        :bind (:map help-map ("C-h" . which-key-C-h-dispatch))
        :hook (after-init . which-key-mode))
#+END_SRC 
 
** The rest:
#+BEGIN_SRC emacs-lisp
;;(use-package init-package)
;;(require 'imdb)
;;(require 'raven)
;;(require 'ipinfo)
(use-package savekill :straight t)

(use-package minions
    :straight t
    :init
    (setq minions-mode-line-lighter "...")
    (setq minions-direct '(flycheck-mode
                           boon-local-mode))
    :config
    (minions-mode 1))
#+END_SRC

* Preferences - Load Centaur files:

** The rest: 
#+BEGIN_SRC emacs-lisp 

;;(require 'init-window)

;;(require 'init-eshell)

;;(require 'init-shell)

(use-package init-markdown)

(use-package init-org)
#+END_SRC

* Orderless / Selectrum / Consult / Embark / Marginalia / Vertico:
** Orderless:
#+BEGIN_SRC emacs-lisp
(use-package orderless
     :straight t
     :ensure t
     :custom (completion-styles '(orderless)))
#+END_SRC
 
** Prescient:
#+BEGIN_SRC emacs-lisp 
(use-package prescient
  :straight t)
#+END_SRC 
 
** Selectrum:
#+BEGIN_SRC emacs-lisp 
(use-package selectrum
     :straight t
     :demand t
     :config
     (selectrum-mode))
;; to make sorting and filtering more intelligent
(use-package selectrum-prescient :straight t)
(selectrum-prescient-mode +1)

;; to save your command history on disk, so the sorting gets more
;; intelligent over time
(prescient-persist-mode +1)

;;(setq amx-backend 'prescient)

#+END_SRC 
** Consult: 
#+BEGIN_SRC emacs-lisp 
;; Example configuration for Consult
(use-package consult
  :straight t
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("M-f" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c b" . consult-bookmark)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-project-imenu)
         ;; M-s bindings (search-map)
         ("M-s f" . consult-find)
         ("M-s L" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch)
         :map isearch-mode-map
         ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
         ("M-s l" . consult-line))                 ;; needed by consult-line to detect isearch

;; Enable automatic preview at point in the *Completions* buffer.
;; This is relevant when you use the default completion UI,
;; and not necessary for Vertico, Selectrum, etc.
:hook (completion-list-mode . consult-preview-at-point-mode)

;; The :init configuration is always executed (Not lazy)
:init

;; Optionally configure the register formatting. This improves the register
;; preview for `consult-register', `consult-register-load',
;; `consult-register-store' and the Emacs built-ins.
(setq register-preview-delay 0
      register-preview-function #'consult-register-format)

;; Optionally tweak the register preview window.
;; This adds thin lines, sorting and hides the mode line of the window.
(advice-add #'register-preview :override #'consult-register-window)

;; Optionally replace `completing-read-multiple' with an enhanced version.
(advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

;; Configure other variables and modes in the :config section,
;; after lazily loading the package.
:config

;; Optionally configure preview. The default value
;; is 'any, such that any key triggers the preview.
;; (setq consult-preview-key 'any)
;; (setq consult-preview-key (kbd "M-."))
;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
;; For some commands and buffer sources it is useful to configure the
;; :preview-key on a per-command basis using the `consult-customize' macro.
(consult-customize
 consult-theme
 :preview-key '(:debounce 0.2 any)
 consult-ripgrep consult-git-grep consult-grep
 consult-bookmark consult-recent-file consult-xref
 consult--source-file consult--source-project-file consult--source-bookmark
 :preview-key (kbd "M-."))

;; Optionally configure the narrowing key.
;; Both < and C-+ work reasonably well.
(setq consult-narrow-key "<") ;; (kbd "C-+")

;; Optionally make narrowing help available in the minibuffer.
;; You may want to use `embark-prefix-help-command' or which-key instead.
;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

;; Optionally configure a function which returns the project root directory.
;; There are multiple reasonable alternatives to chose from.
;;;; 1. project.el (project-roots)
(setq consult-project-root-function
      (lambda ()
        (when-let (project (project-current))
          (car (project-roots project)))))
;;;; 2. projectile.el (projectile-project-root)
;; (autoload 'projectile-project-root "projectile")
;; (setq consult-project-root-function #'projectile-project-root)
;;;; 3. vc.el (vc-root-dir)
;; (setq consult-project-root-function #'vc-root-dir)
;;;; 4. locate-dominating-file
;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
            )

#+END_SRC 
 
** Marginalia:
#+BEGIN_SRC emacs-lisp 
(use-package marginalia
       :straight t
       :ensure t
       :config
       (marginalia-mode))
#+END_SRC 

** Embark:
Useful article to read when I have time:
https://karthinks.com/software/fifteen-ways-to-use-embark/

#+BEGIN_SRC emacs-lisp 
(use-package embark
  :straight t
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :straight t
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC 

** Vertico:
#+BEGIN_SRC emacs-lisp :tangle no 
;; Enable vertico
;; NOTTANGLED
(use-package vertico
  :init
  (vertico-mode)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Configure directory extension
(use-package vertico-directory
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+END_SRC 

** Orderless:
#+BEGIN_SRC emacs-lisp 
;; Use the `orderless' completion style.
;; Enable `partial-completion' for files to allow path expansion.
;; You may prefer to use `initials' instead of `partial-completion'.
(use-package orderless
  :straight t
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :straight t
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

#+END_SRC 
** Mini-frame:
https://github.com/muffinmad/emacs-mini-frame
#+BEGIN_SRC emacs-lisp
(use-package mini-frame :straight t)
(custom-set-variables
 '(mini-frame-show-parameters
   '((top . 15)
     (width . 0.85)
     (left . 0.5)
     (height . 10)
     ;;(foreground-color . "DarkSlateBlue")
     (background-color . "DarkSlateBlue"))))


;; GTK bug on Gnome:
(setq x-gtk-resize-child-frames 'resize-mode)

(mini-frame-mode +1)
;;(setq ring-bell-function 'ignore)

#+END_SRC 
      
** Misc:
#+BEGIN_SRC emacs-lisp 
(defun find-fd (&optional dir initial)
  (interactive "P")
  (let ((consult-find-command "fd --color=never --full-path ARG OPTS"))
    (consult-find dir initial)))

#+END_SRC 
 

* Company Mode:
#+BEGIN_SRC emacs-lisp 
 (use-package company
   :straight t
   :diminish company-mode
   :defines (company-dabbrev-ignore-case company-dabbrev-downcase)
   :preface
   :bind (("M-/" . company-complete)
           :map company-active-map
          ("C-p" . company-select-previous)
          ("C-n" . company-select-next)
          ("TAB" . company-complete-common-or-cycle)
          ("<tab>" . company-complete-common-or-cycle)
          ("S-TAB" . company-select-previous)
          ("<backtab>" . company-select-previous)
          :map company-search-map
          ("C-p" . company-select-previous)
          ("C-n" . company-select-next))
   :hook (after-init . global-company-mode)
   :config
   (setq company-tooltip-align-annotations t ; aligns annotation to the right
         company-tooltip-limit 12            ; bigger popup window
         company-idle-delay .2               ; decrease delay before autocompletion popup shows
         company-echo-delay 0                ; remove annoying blinking
         company-minimum-prefix-length 2
         company-require-match nil
         company-dabbrev-ignore-case nil
         company-dabbrev-downcase nil)

; Popup documentation for completion candidates
 (use-package company-quickhelp
   :straight t
   :bind (:map company-active-map
               ("M-h" . company-quickhelp-manual-begin))
   :hook (global-company-mode . company-quickhelp-mode)
   :config (setq company-quickhelp-delay 0.8)))


;; Support yas in company
;; Note: Must be the last to involve all backends
;; (setq company-backends (mapcar #'company-backend-with-yas company-backends))
#+END_SRC 
 
* Hydras
#+BEGIN_SRC emacs-lisp
    (use-package hydra-posframe
          ;;:straight t
          :load-path "~/.emacs.d/lisp/"
          :hook (after-init . hydra-posframe-enable)
          :custom-face (hydra-posframe-face ((t (:background "DarkSlateBlue"))))
          :custom-face (hydra-posframe-border-face ((t (:background "DarkBlue")))))

          (defhydra hydra-eledit-conf (:color red :hint nil)

            "Edit config files"
            ("i"  (find-file "~/.emacs.d/init.el") "init.el" :color blue)
            ("c"  (find-file "~/.emacs.d/custom-post.el") "custom-post.el" :color blue)
            ("f"  (find-file "~/.emacs.d/My-emacs/functions.el") "functions.el" :color blue)
            ("o"  (find-file "~/dotfiles/emacs.d/config.org") "config.org" :color blue)
            ("p"  (find-file "~/.emacs.d/config-term.org") "config-term.org" :color blue)
            ("s"  (find-file "~/.emacs.d/My-emacs/hyper-sc.el") "hyper-sc.el" :color blue)
            ("k"  (find-file "~/.emacs.d/My-emacs/keychords-sc.el") "keychords.el" :color blue)
            ("q"   quit-window "quit" :color blue))

            (global-set-key (kbd "C-c n") #'hydra-eledit-conf/body)

            (defhydra hydra-edit-conf (:color red
                                                   :hint nil)
            "Edit: "
            ("p"  (find-file (concat "/sudo::" "/etc/pacman.conf")) "pacman" :color blue)
            ("m"  (find-file (concat "/sudo::" "/etc/pacman-mirrors.conf")) "mirrors" :color blue)
            ("f"  (find-file (concat "/sudo::" "/etc/fstab")) "fstab" :color blue)
            ("s"  (find-file (concat "/sudo::" "/etc/sddm.conf")) "sddm" :color blue)
            ("g"  (find-file (concat "/sudo::" "/etc/default/grub")) "grub" :color blue)
            ("t"  (find-file "~/.config/termite/config") "Termite" :color blue)
            ("x"  (find-file "~/.Xmodmap") "Xmodmap" :color blue)
            ("y"  (find-file "~/.config/yay/config.json") "yay" :color blue)
            ("z"  (find-file "~/.zshrc") "zsh" :color blue)
            ("q"   quit-window "quit" :color blue))

            (global-set-key (kbd "C-c e") #'hydra-edit-conf/body)

        (use-package backup-each-save :straight t)
            (add-hook 'after-save-hook 'backup-each-save)
            (defun backup-each-save-filter (filename)
              (let ((ignored-filenames
                 '("^/tmp" "semantic.cache$" "\\.emacs-places$"
                   "\\.recentf$" ".newsrc\\(\\.eld\\)?"))
                (matched-ignored-filename nil))
                (mapc
                 (lambda (x)
                   (when (string-match x filename)
                 (setq matched-ignored-filename t)))
                 ignored-filenames)
                (not matched-ignored-filename)))
            (setq backup-each-save-filter-function 'backup-each-save-filter)
#+END_SRC

* Spare:
#+BEGIN_SRC emacs-lisp
#+END_SRC

* Programming
** C Programming:
#+BEGIN_SRC emacs-lisp 
;; Turn C-d back to duplicate line!!
(define-key c-mode-map (kbd "C-d") nil)
#+END_SRC 
 
** Python:
#+BEGIN_SRC emacs-lisp
(defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

(add-hook 'python-mode-hook 'my/python-mode-hook)
(use-package init-python) ;; :straight t no work!
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
;;(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

** Flycheck mode:
#+BEGIN_SRC emacs-lisp 
(use-package flycheck
  :straight t
  :diminish flycheck-mode
  :hook (after-init . global-flycheck-mode)
  :config
  (setq flycheck-indication-mode 'right-fringe)
  (setq flycheck-emacs-lisp-load-path 'inherit))

;; Only check while saving and opening files
(setq flycheck-check-syntax-automatically '(save mode-enabled))

    ;; ;; Display Flycheck errors in GUI tooltips
    ;; (if (display-graphic-p)
    ;;     (use-package flycheck-pos-tip
    ;;       :hook (global-flycheck-mode . flycheck-pos-tip-mode)
    ;;       :config (setq flycheck-pos-tip-timeout 30))
    ;;   (use-package flycheck-popup-tip
    ;;     :hook (global-flycheck-mode . flycheck-popup-tip-mode)))

    ;; Jump to and fix syntax errors via `avy'
    (use-package avy-flycheck
      :hook (global-flycheck-mode . avy-flycheck-setup))

  (use-package flycheck-posframe
    ;;:ensure t
    :straight t
    :after flycheck
    :config (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode)
    :custom-face (flycheck-posframe-error-face ((t (:background "Red"))))
    :custom-face (flycheck-posframe-warning-face ((t (:background "DarkBlue"))))
    :custom-face (flycheck-posframe-border-face ((t (:background "DarkBlue")))))

  ;; (flycheck-posframe-warning-face ((t "Black")))
  ;;(set-face-attribute 'flycheck-posframe-warning-face "Black")
  (setq flycheck-posframe-warning-face "black")

  (flycheck-posframe-mode 1)
#+END_SRC 
** Spare: 
#+BEGIN_SRC emacs-lisp 
#+END_SRC 
 
** Miscellaneous Programming:
#+BEGIN_SRC emacs-lisp
  ;;(require 'init-projectile)
  ;(require 'init-lsp)
  (use-package init-emacs-lisp) ;; :straight t no work!
  (setq lsp-pyls-plugins-pycodestyle-ignore '("E501"))

(use-package rust-mode straight t)

(use-package lsp-jedi
  :straight t
  :ensure t
  :config
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-disabled-clients 'pyls)
    (add-to-list 'lsp-enabled-clients 'jedi)))
#+END_SRC

* Run-command-recipes section:
#+BEGIN_SRC emacs-lisp
(use-package run-command
  :straight t
  :bind ("M-r" . run-command))
  (defun run-command-recipe-example ()
    (list
     ;; Arbitrary command
     (list :command-name "Sky"
           :command-line "/usr/bin/sky")
     (list :command-name "Variety"
           :command-line "~/scripts/pysimplegui/v.py")   
     ))
#+END_SRC 
 
* sxhd mode:
#+BEGIN_SRC emacs-lisp 
(define-generic-mode sxhkd-mode
    '(?#)
    '("alt" "Escape" "super" "bspc" "ctrl" "space" "shift")
    nil
    '("sxhkdrc")
    nil
  "Simple mode for sxhkdrc files.")
#+END_SRC 
 
* Key reassignments:
#+BEGIN_SRC emacs-lisp
  (bind-key "C-s" (kbd "C-x C-s")  key-translation-map
            (and
               ;; keys have to be at "toplevel" not in a middle of
               ;;a key sequence
               (equal (this-command-keys-vector)
                      (vector last-input-event))
               (or
                ;; in general not when key is read within another command
                ;; only for interactive toplevel use
                (not this-command)
                ;; but do translate for describe key commands
                ;; which should show info for translated key
                ;; that actual gets triggered when the command
                ;; is called for real
                (memq this-command my-translate-cmds))))

  (bind-key "C-o" (kbd "C-x C-f")  key-translation-map
                 (and
                    ;; keys have to be at "toplevel" not in a middle of
                    ;;a key sequence
                    (equal (this-command-keys-vector)
                           (vector last-input-event))
                    (or
                     ;; in general not when key is read within another command
                     ;; only for interactive toplevel use
                     (not this-command)
                     ;; but do translate for describe key commands
                     ;; which should show info for translated key
                     ;; that actual gets triggered when the command
                     ;; is called for real
                     (memq this-command my-translate-cmds))))

(global-unset-key (kbd "C-x C-s"))
(global-set-key (kbd "C-x C-s")'my-save-buff)

#+END_SRC

 
* Opacity:
#+BEGIN_SRC emacs-lisp
(defun opacity-modify (&optional dec)
"modify the transparency of the emacs frame; if DEC is t, decrease the transparency, otherwise increase it in 10%-steps"
  (let* ((alpha-or-nil (frame-parameter nil 'alpha)) ; nil before setting
         (oldalpha (if alpha-or-nil alpha-or-nil 100))
         (newalpha (if dec (- oldalpha 10) (+ oldalpha 10))))
    (when (and (>= newalpha frame-alpha-lower-limit) (<= newalpha 100))
      (modify-frame-parameters nil (list (cons 'alpha newalpha))))))

;; C-8 will increase opacity (== decrease transparency)
;; C-9 will decrease opacity (== increase transparency)
;; C-0 will returns the state to normal
(global-unset-key (kbd "C-8"))
(global-unset-key (kbd "C-9"))
(global-unset-key (kbd "C-0"))
(global-set-key (kbd "C-8") '(lambda()(interactive)(opacity-modify)))
(global-set-key (kbd "C-9") '(lambda()(interactive)(opacity-modify t)))
(global-set-key (kbd "C-0") '(lambda()(interactive)
                               (modify-frame-parameters nil `((alpha . 100)))))
#+END_SRC

* Last thing:
#+BEGIN_SRC emacs-lisp
(global-unset-key (vector (list 'shift 'left)))
(global-unset-key (vector (list 'shift 'right)))
(global-unset-key (vector (list 'shift 'up)))
(global-unset-key (vector (list 'shift 'down)))
(global-whitespace-mode 0)
(whitespace-mode 0)
(ryo-modal-mode 0)
(message "Section Background set?")
(set-background-color "#000000")
;(timed-updater)
(message "^^^ last line in file ^^^")
;(setq initial-buffer-choice (lambda () (get-buffer "*Bookmark List*")))
(bookmark-bmenu-list)
(set-cursor-color "green")

;; Blue Whale
#+END_SRC
